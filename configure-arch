#!/bin/bash

# Exit on error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status messages
print_status() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "Please run as root"
    exit 1
fi

APP_DIR="/opt/wutsk-calendar"

# Check if environment variables are set
if [ -z "$NEXT_PUBLIC_USOS_CONSUMER_KEY" ] || [ -z "$USOS_CONSUMER_SECRET" ] || [ -z "$AMT_USERNAME" ] || [ -z "$AMT_PASSWORD" ]; then
    print_error "Required environment variables are not set. Please set:"
    print_error "NEXT_PUBLIC_USOS_CONSUMER_KEY"
    print_error "USOS_CONSUMER_SECRET"
    print_error "AMT_USERNAME"
    print_error "AMT_PASSWORD"
    exit 1
fi

# Configure nginx
print_status "Configuring nginx..."
# Create nginx conf.d directory if it doesn't exist
mkdir -p /etc/nginx/conf.d

# Create nginx log directory with correct permissions
print_status "Setting up nginx logs..."
mkdir -p /var/log/nginx
chown -R http:http /var/log/nginx  # Arch Linux uses 'http' user instead of 'nginx'
chmod 755 /var/log/nginx

# Create main nginx configuration
print_status "Creating main nginx configuration..."
cat > /etc/nginx/nginx.conf << 'EOL'
user http;
worker_processes auto;
events {
    worker_connections 1024;
}

http {
    charset utf-8;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    types_hash_max_size 2048;
    types_hash_bucket_size 128;
    client_max_body_size 16M;

    # MIME
    include mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;

    # SSL
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;

    # Load configs
    include /etc/nginx/conf.d/*.conf;
}
EOL

# Create application nginx configuration
print_status "Creating application nginx configuration..."
cat > /etc/nginx/conf.d/wutsk-calendar.conf << 'EOL'
server {
    listen 443 ssl;
    server_name _;

    ssl_certificate /etc/letsencrypt/live/localhost/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/localhost/privkey.pem;

    # Logging
    access_log /var/log/nginx/wutsk-calendar-access.log combined;
    error_log /var/log/nginx/wutsk-calendar-error.log warn;

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}
EOL

# Configure SSL certificates
print_status "Setting up SSL certificates..."
mkdir -p /etc/letsencrypt/live/localhost
chown -R root:root /etc/letsencrypt
chmod 755 /etc/letsencrypt
chmod 755 /etc/letsencrypt/live
chmod 755 /etc/letsencrypt/live/localhost

if [ ! -f "/etc/letsencrypt/live/localhost/fullchain.pem" ]; then
    print_status "Generating self-signed certificate..."
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/letsencrypt/live/localhost/privkey.pem \
        -out /etc/letsencrypt/live/localhost/fullchain.pem \
        -subj "/C=PL/ST=Mazowieckie/L=Warsaw/O=Politechnika Warszawska/CN=localhost"

    # Set proper permissions for SSL files
    chmod 644 /etc/letsencrypt/live/localhost/fullchain.pem
    chmod 600 /etc/letsencrypt/live/localhost/privkey.pem
fi

# Verify SSL certificate
print_status "Verifying SSL certificate..."
if [ ! -f "/etc/letsencrypt/live/localhost/fullchain.pem" ] || [ ! -f "/etc/letsencrypt/live/localhost/privkey.pem" ]; then
    print_error "SSL certificate files are missing"
    exit 1
fi

# Test nginx configuration
print_status "Testing nginx configuration..."
if ! nginx -t; then
    print_error "Nginx configuration test failed"
    exit 1
fi

# Configure firewall
print_status "Configuring firewall..."
if command -v ufw &> /dev/null; then
    ufw allow 80/tcp
    ufw allow 443/tcp
elif command -v firewalld &> /dev/null; then
    firewall-cmd --permanent --add-port=80/tcp
    firewall-cmd --permanent --add-port=443/tcp
    firewall-cmd --reload
fi

# Create .env.local file
print_status "Creating .env.local file..."
cat > "$APP_DIR/.env.local" << EOL
NEXT_PUBLIC_USOS_CONSUMER_KEY=${NEXT_PUBLIC_USOS_CONSUMER_KEY}
USOS_CONSUMER_SECRET=${USOS_CONSUMER_SECRET}
NEXT_PUBLIC_USOS_CALLBACK_URL=/api/auth/callback
AMT_PORT=16992
AMT_USERNAME=${AMT_USERNAME}
AMT_PASSWORD=${AMT_PASSWORD}
EOL

# Set proper permissions for .env.local
chmod 600 "$APP_DIR/.env.local"

# Remove executed file if it exists
rm -f "$APP_DIR/executed"

# Create systemd service file
print_status "Creating systemd service..."
cat > /etc/systemd/system/wutsk-calendar.service << EOL
[Unit]
Description=WUT SK Calendar Application
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/wutsk-calendar
Environment=NODE_ENV=production
Environment=PATH=/opt/wutsk-calendar/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/bin
Environment=HOST=0.0.0.0
Environment=PORT=3000
Environment=NEXT_PUBLIC_USOS_CONSUMER_KEY=${NEXT_PUBLIC_USOS_CONSUMER_KEY}
Environment=USOS_CONSUMER_SECRET=${USOS_CONSUMER_SECRET}
Environment=AMT_USERNAME=${AMT_USERNAME}
Environment=AMT_PASSWORD=${AMT_PASSWORD}
ExecStart=/bin/bash -c 'cd /opt/wutsk-calendar && /opt/wutsk-calendar/node_modules/.bin/next start -H 0.0.0.0'
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOL

# Reload systemd and enable services
print_status "Reloading systemd and enabling services..."
systemctl daemon-reload
systemctl enable wutsk-calendar
systemctl enable nginx

# Start services
print_status "Starting services..."
systemctl restart nginx
systemctl start wutsk-calendar

# Wait for the service to start
print_status "Waiting for service to start..."
sleep 5

# Check if the service is running
if ! systemctl is-active --quiet wutsk-calendar; then
    print_error "Service failed to start. Checking logs..."
    journalctl -u wutsk-calendar -n 50
    exit 1
fi

print_status "Configuration completed successfully!"
print_warning "The application has been configured with the provided environment variables"
print_warning "The application is available at https://localhost"
print_warning "To verify the configuration, check the service status: systemctl status wutsk-calendar"
